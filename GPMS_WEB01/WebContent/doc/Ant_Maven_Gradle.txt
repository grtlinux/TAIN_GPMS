# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
#
# ANT : apache-ant-1.9.9
#
#

Apache Ant는 Java 기반의 빌드 툴이다.

Shell 기반의 커맨드를 확장한 모델 대신에, 자바 클래스들의 사용성을 확장

Shell command를 사용하는 대신에, xml 기반의 설정파일로 여러가지의 실행되는 task를 target tree에 호출.

각각의 task는 독특한 태스크 인터페이스에 기반을 두고 있는 오브켁트에 의해 실행

플랫폼에 비의존성

시스템 요구사항 : ant를 빌드 해 사용하려면, 클래스 패스에 JAXP 호환의 xml 파서가 인스톨되어 있어야 가능

[ 환경설정 ]

	Windows

		set ANT_HOME=C:\apache-ant-1.9.9
		set JAVA_HOME=C:\jdk1.7.0
		set PATH=%ANT_HOME%\bin;%JAVA_HOME%\bin;%PATH%

	linux(bash)

		export ANT_HOME=/usr/local/apache-ant-1.9.9
		export JAVA_HOME=/usr/local/jdk1.7.0
		export PATH=$ANT_HOME/bin;$JAVA_HOME/bin;$PATH

	Linux(csh)

		setenv ANT_HOME=/usr/local/apache-ant-1.9.9
		setenv JAVA_HOME=/usr/local/jdk1.7.0
		set PATH=( $ANT_HOME/bin $JAVA_HOME/bin $PATH )

[ Ant 실행본 배포판 폴더 ]

	ant
		bin         : 실행 스크립트
		lib         : ant.jar들과 필요한 의존 파일들
		docs        : 문서
			ant2
			images
			manual
		etc         : xsl 툴이


[ Ant 실행 ]

	-help             : 도움말을 출력한다.
	-projecthelp      : 프로젝트의 도움말 정보를 출력한다.
	-version          : 버젼 정보를 출력한다.
	-quiet            : 적은 양의 메시지를 출력한다.
	-verbose          : 추가적인 메시지를 출력한다.
	-debug            : 디버깅 정보를 출력한다.
	-logfile file     : 로그 메시지를 file에 기록한다.
	-buildfile file   : 지정한 file을 빌드 파일로 사용한다.
	-Dproperty=value  : 이름이 property인 프로퍼티의 값을 value로 지정한다.
	
	> ant
	
		Buildfile: build.xml does not exist!
		Build failed
	
	> ant -version
	
		Apache Ant(TM) version 1.9.9 compiled on February 2 2017

	> ant -buildfile testBuild.xml main clean         <- target명


# -----------------------------------------------------------------------------------------------------------
[ build.properties ] sample - 1
#
#
version   = 1.7.98


# -----------------------------------------------------------------------------------------------------------
[ build.xml ] sample - 1

<?xml version="1.0" encoding="euc-kr"?>
<project name="test" default="dist">
	<!-- 프로퍼티를 지정 합니다. -->
	<property file="build.properties"/>
	<property name="base.dir"  value="."/>
	<property name="dist.dir"  value="dist"/>
	<property name="build.dir" value="build"/>
	<property name="src.dir"   value="src"/>
	<property name="jar.file"  value="${version}_helloworld.jar"/>
	<property name="dist.file"  value="${version}_helloworld.zip"/>

	<!-- 빌드 초기 단계에 날짜 및 시간을 출력 -->
	<target name="prepare">
		<tstamp>
			<format property="DSTAMP" pattern="yyyy.MM.dd"/>
			<format property="TSTAMP" pattern="HH:mm"/>
		</tstamp>
		<echo message="Build Start!! ======> ${DSTAMP}-${TSTAMP}"/>
	</target>

	<!-- 이미 있는 배포 파일 및 데렉토리를 삭제 -->
	<target name="clean" depends="prepare">
		<delete dir="${dist.dir}"/>
		<delete dir="${build.dir}"/>
	</target>

	<!-- 소스 컴파일 -->
	<target name="compile" depends="clean">
		<mkdir dir="${build.dir}"/>
		<javac deprecation="off" srcdir="${src.dir}" destdir="${build.dir}" listfiles="no" failonerror="true" >
			<classpath>
				<pathelement path="${base.dir}/lib" />
				<fileset dir="${base.dir}/lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- 빌드 디렉토리에 컴파일이 끝난 클래스를 jar 파일로 묶음 -->
	<target name="mkjar" depends="compile">
		<mkdir dir="${dist.dir}"/>
		<jar destfile="${dist.dir}/${jar.file}" basedir="${build.dir}" />
	</target>

	<!-- 배포할 라이브러리와 소스등을 배포용 디렉토리로 복사하고 배포용 디렉토리를 zip으로 묶음 -->
	<!-- jar와 소스, lib 아래의 jar를 배포용 디렉토리에 복사 후 zip으로 묶음 -->
	<target name="dist" depends="mkjar">
		<copy todir="${dist.dir}/lib">
			<fileset dir="lib" />
		</copy>
		<copy todir="${dist.dir}/src">
			<fileset dir="src" />
		</copy>
		<zip destfile="${DSTAMP}_${dist.file}">
			<fileset dir="${dist}/.."/>
		</zip>
	</target>

	<!-- HelloWorld 클래스를 호출하여 실행 -->
	<!-- <java> 태스크에 실행 파일을 입력하고 클래스 패스를 지정 -->
	<target name="run">
		<java classname="test.HelloWorld">
			<classpath>
				<pathelement location="${dist.dir}/${jar.file}" />
				<pathelement path="${base.dir}/lib" />
				<fileset dir="${base.dir}/lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>
</project>




# -----------------------------------------------------------------------------------------------------------
[ axis_bujava.xml ] sample - 2

<?xml version="1.0"?>
<project name="ANTTEST" default="main" basedir=".">
	<description>
		Ant example
	</description>
	
	<!-- properties -->	
	<property name="src"    location="src"    />
	<property name="build"  location="build"  />
	<property name="dist"   location="dist"   />
	<property name="backup" location="backup" />

	<!-- init -->	
	<target name="init">
		<mkdir dir="${basedir}" />
		<mkdir dir="${build}" />
		<tstamp>
			<format property="DSTAMP" pattern="yyyyMMdd" />
			<format property="TSTAMP" pattern="HHmm" />
		</tstamp>
	</target>
	
	<!-- backup -->	
	<target name="backup" depends="init">
		<mkdir dir="${backup}/${DSTAMP}" />
		<copy todir="${backup}/${DSTAMP}" >
			<fileset dir="${src}" />
		</copy>
	</target>
	
	<!-- compile -->	
	<target name="compile" depends="backup" description="compile the source">
		<javac srcdir="${src}" destdir="${build}" />
	</target>
	
	<!-- dist -->	
	<target name="dist" depends="compile" description="generate the discribution">
		<mkdir dir="${dist}/lib" />
		<jar jarfile="${dist}/lib/main_${DSTAMP}.jar" basedir="${build}" />
	</target>
	
	<!-- clean -->	
	<target name="clean" description="clean up">
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>
	
	<!-- main -->	
	<target name="main">
		<wsgen/>
	</target>
	
</project>


# -----------------------------------------------------------------------------------------------------------
[ Result ] sample - 2

TESTANT
	src
		com.antTest
			antTest.java
	backup
		20110208
			com
				antTest
					antTest.java
	build
		com
			antTest
				antTest.class
	dist
		lib
			main_20110208.jar
	
	axis_bujava.xml



# -----------------------------------------------------------------------------------------------------------
[ build.xml ] sample - 3

<?xml version="1.0" encoding="utf-8"?>
<project name="backup build script for ant" default="dist" basedir=".">

	<property name="backup_src.dir" location="d:/workspace/" />
	<property name="backup_dst.dir" location="d:/workspace/backup" />
	<property name="crsweb1_jar.dir" location="d:/ASF/apphome/wtpwebapps/crsweb1" />
	<property name="crsweb2_jar.dir" location="d:/ASF/apphome/wtpwebapps/crsweb2" />

	<!-- date -->
	<target name="init">
		<tstamp>
			<format property="yyyymmdd" pattern="yyyy-MM-dd"/>
			<format property="hhmi" pattern="HH:mm"/>
			<format property="DSTAMP" pattern="yyyyMMdd"/>
			<format property="TSTAMP" pattern="HHmm"/>
		</tstamp>
		<echo message="Build Start!! Now time is ${yyyymmdd}-${hhmi}"/>
		<mkdir dir="${backup_dst.dir}"/>
		<echo message="Backup directory [${backup_dst.dir}] is created!!"/>
	</target>

	<!-- mkdir
	<target name="backup_makedir">
		<mkdir dir="${backup_dst.dir}"/>
		<echo message="Backup directory created!!"/>
	</target>
	-->

	<target name="dist" depends="init">
		<zip zipfile="${backup_dst.dir}/crs_backup_${DSTAMP}${TSTAMP}.zip" >
			<fileset dir="${backup_src.dir}" >
				<include name="crscommon/**"/>
				<include name="crsweb1/**"/>
				<include name="crsweb2/**"/>
			</fileset>
		</zip>
		<echo message="crs_backup_${DSTAMP}${TSTAMP}.zip is completed!!"/>

		<jar jarfile="${backup_dst.dir}/crsweb1_app_${DSTAMP}${TSTAMP}.jar" >
			<fileset dir="${crsweb1_jar.dir}" >
				<include name="**"/>
				<exclude name="WEB-INF/classes/crsweb.properties"/>
				<exclude name="WEB-INF/classes/SqlMapConfig.xml"/>
			</fileset>
		</jar>
		<echo message="crsweb1_app_${DSTAMP}${TSTAMP}.jar is completed!!"/>

		<jar jarfile="${backup_dst.dir}/crsweb1_web_${DSTAMP}${TSTAMP}.jar" >
			<fileset dir="${crsweb1_jar.dir}" >
				<include name="css/**"/>
				<include name="email/**"/>
				<include name="images/**"/>
				<include name="js/**"/>
				<include name="RexServer30/**"/>
				<include name="uploads/**"/>
				<include name="XecureObject/**"/>
				<include name="index.html"/>
			</fileset>
		</jar>
		<echo message="crsweb1_web_${DSTAMP}${TSTAMP}.jar is completed!!"/>

		<!-- crsweb2
		<jar jarfile="${backup_dst.dir}/crsweb2_app_${DSTAMP}${TSTAMP}.jar" >
			<fileset dir="${crsweb2_jar.dir}" >
				<include name="**"/>
			</fileset>
		</jar>
		<echo message="crsweb2_app_${DSTAMP}${TSTAMP}.jar is completed!!"/>
		-->

		<!-- ftp
		<ftp server="ftp.apache.org"
			remotedir="incoming"
			userid="anonymous"
			password="me@myorg.com"
			depends="yes"  >
			<fileset dir="htdocs/manual"/>
		</ftp>
		-->

	<!-- echo message="Build End!!"/ -->
	</target>
</project>








# -----------------------------------------------------------------------------------------------------------
[ build.xml 파일 구조 ]

	<?xml version="1.0" encoding="euc-kr"?>
	<project name="ProjectName" default="targetNameN" basedir=".">
		<target name="init"> ..... </target>
		<target name="compile" depends="init"> ..... </target>
		<target name="copyJSP" depends="compile"> ..... </target>
		<target name="copyJar" depends="copyJSP"> ..... </target>
		<target name="makeWar" depends="copyJar"> ..... </target>
		<target name="clean"   depends="makeWar"> ..... </target>
		
		<target name="make1" if="test" depends="compile"> ..... </target>
		<target name="make2" unless="test" depends="compile"> ..... </target>
	</project>

	[ project 요소의 속성 ]

		name    : 프로젝트의 이름
		default : ant를 실행할 때 target을 지정하지 않은 경우 기본적으로 사용할 target
		basedir : 경로 계산할 때의 기준 디렉토리. 지정하지 않은 경우 현재 디렉토리. ${basedir}로 사용가능

	[ target 요소의 속성 ]

		name        : 타겟의 이름
		depends     : 타겟이 의존하고 있는 타겟의 목록. 콤마(,)로 구분
		if          : 지정한 프로퍼티가 설정되어 있는 경우 타겟을 수행
		unless      : 지정한 프로퍼티가 설정되어 있지 않은 경우 타겟을 수행
		description : 타겟이 수행하는 기능에 대한 설명


	Ant는 특정 파일/디렉토리를 표현할 수 있는 방법을 제공하고 있으며,
	표현 방법을 사용하여 지정한 파일/디렉토리를 처리 대상에 포함시킬 수도 있고 처리 대상에서 삭제할 수도 있다.

<Ant의 경로 규칙>

	경로 규칙은 파일이나 디렉토리 또는 경로 집합을 사용하는 태스크나 <fileset>이나 <patternset>등에 적용된다.

	'*' ----- 0개 또는 그 이상의 글자가 매칭된다.
	'?' ----- 한 글자와 매칭된다.

	디렉토리 지정에서'*'를 사용할 경우 디렉토리 트리에서 단 하나의 계층만을 가리키게 되는 반면에 '**'는 다계층을 나타낸다.

	'**'로 패턴이 끝나게 되면 디렉토리뿐만 아니라 모든 파일을 나타낸다.

		<copy todir="backup">
		   <fileset dir="${basedir}"  includes="src/**,lib/*.jar,jspsrc/**"
				   exclude="**/*.bak"  defaultexcludes="no" />
		</copy>

<fileset>태그는 파일 집합을 사용하는 태스크에서 사용 가능한 태그

	includes, excludes, includesfile, excludefile, defaultexcludes 속성을 지원
	includes 속성은 처리 대상에 포함시킬 파일/디렉토리의 목록을 지정할 때 사용
	excludes 속성은 처리 대상에서 제외시킬 파일/디렉토리의 목록을 지정할 때 사용
	includes 속성과 excludes 속성은 여러 경로를 지정할 수 있으며, 각 경로는 콤마나 공백문자로 구분한다.
	Includes 속성과 excludes 속성 대신에 <include>태그와 <exclude> 태그를 사용 가능

	기본적으로 제외되는 파일들을 제외시키지 않고 싶다면 defaultexclude 속성의 값을 "no"로 명시
	Ant에서 excludes속성에 명시하지 않아도 자동으로 처리 대상에 제외되는 파일/디렉토리

		**/*~, **/#*#, **/.#*, **/%*%,**/._*
		**/CVS,**/CVS/**,**/.cvsignore
		**/SCCS,**/SCCS/**
		**/vssver.scc
		**/.svn, **/.svn/**
		**/.DS_Store

[fileset 태그의 속성]

	dir             파일 집합을 표시할 때의 루트 디렉토리                dir이나file중 한 개를 반드시 명시
	file            한 개의 파일을 명시할 때 사용
	casesensitive   True일 경우 대소문자를 구분해서 처리, 기본값 true
	followsymlinks  심볼릭 링크를 따라갈지의 여부를 나타낸다 기본값 true


<direst>은 디렉토리의 집합을 나타낼 때 사용

	includes, includesfile, excludes, excludesfile 속성을 지원

[direst 태그의 속성]

	dir              디렉토리 집합을 표시할 때의 루트 디렉토리
	casesensitive    대소문자의 구분 여부, 기본값은 true
	followsymlinks   심볼릭 링크를 따라갈지의 여부, 기본값은true


<patternset>은 파일 집합이나 디렉토리 집합 중에서 여러 곳에서 공통적으로 사용되는 것들을 별도로 지정해서 재사용할 수 있도록 해주므로 중복성을 감소시킬 수 있다.

<patternset>은 <fileset>혹은 <direst> 태그 내에서 사용된다.

	Includes, includesfile, excludes, excludefile 속성 지원
	Id 속성을 사용하여 패턴 집합의 이름을 지정

		<patternset id="commonJar">
			<include name="servlet.jar"/>
			<include name="mail.jar"/>
			<include name="activation.jar"/>
		<patternset>

	패턴 집합을 사용할 때에는 refid속성을 사용한다.

		<pattern refid="commonJar"/>


<path>은 파일과 디렉토리가 함께 사용되는 경로 목록을 공통적으로 사용하고 싶을 때 이용

	<path>에서 경로를 지정할 때에는 <pathelement>태그를 사용
	location 속성은 하나의 디렉토리 또는 파일을 나타낼 때 사용
	여러 경로를 함께 표시 할 때 각각의 경로는 ';'나 ':'을 사용하여 구분

		<path id="project.class.path">
			 <pathelement location="classes"/>
			 <pathelement path="lib/servlet.jar;lib/commons-fileupload-1.0.jar"/>
		</path>

<classpath>와 같이 경로를 사용하는 태그에서는 refid속성을 사용하여 <path>요소를 경로값으로 사용할 수 있다.

		<classpath refid="project.class.path"/>


<property>는 빌드 파일 내부에서 사용되는 프로퍼티

	프로퍼티의 값을 사용할 때에는 ${프로퍼티이름} 형식을 사용

	name          프로퍼티의 이름
	value         프로퍼티의 값을 지정
	location      지정한 경로명의 절대 경로명을 값으로 지정
	resource      프로퍼티 파일을 읽어 올 때 사용할 자원명을 지정
	file          지정할 파일로부터 프로퍼티 목록을 읽어 온다
	environment   환경 변수를 읽어 올 때 사용할 접두어를 지정
	classpath     자원으로부터 프로퍼티 파일을 읽어 올 때 사용할 클래스패스
	classpathref  클래스패스로 사용할 경로를 <path>요소로부터 가져온다
	prefix        Resource나 file속성을 사용하여 읽어 온 프로퍼티를 참조 할 때 사용할 접두어를 지정,
				  접두어 맨 뒤에 "."가 포함되어 있지 않을 경우, 자동으로 "."이 접두어 뒤에 붙는다.


	Ant로 빌드하는 과정에서 많은 프로퍼티를 사용하는 경우 별도의 프로퍼티 파일을 작성한 후
	file이나 resource 속성을 사용하여 프로퍼티를 초기화하면 편리하다.

	Ant에서 기본적으로 제공하는 프로퍼티
	모든 자바의 시스템 프로퍼티를 Ant의 프로퍼티로 사용할 수 있다.

		Basedir ? 프로젝트의 기본 디렉토리의 절대 경로. <project> 태그의 basedir 속성에 명시된 값
		Ant.file ? 빌드 파일의 절대 경로
		Ant.version -  Ant 버전
		Ant.project.name ? 현재 실행중인 프로젝트의 이름 . proejct의 name 속성으로 지정
		Ant.java.version ? Ant가 발견한 자바 버전. 현재 "1.1", "1.2","1.3","1.4"를 값으로 가질수 있다.





# -----------------------------------------------------------------------------------------------------------
[ Ant의 주요 태스크 ]

http://ant.apacne.org/manual/index.html
하나의 target내에 있는 태스크는 순차적으로 수행되며, 오직 그 타겟이 수행될 때에만 실행된다.

	1. javac: 자바 소스 코드 컴파일

		<javac srcdir="소스 코드가 위치한 디렉토리"
			   destdir="컴파일한 클래스가 위치한 디렉토리"
			   classpath="클래스패스">
		…….
		</javac>

		[javac 태스크가 제공하는 속성]

			srcdir        소스가 위치한 디렉토리를 지정
			destdir       생성된 클래스가 위치할 디렉토리를 지정
			includes      컴파일할 파일의 패턴 목록, 기본값 *.java
			classpath     컴파일할 때 사용할 클래스패스.
						  ,<classpath>태그를 사용하여 지정가능
			classpathref  <path>로 지정한 경로를 클래스패스로 참조
			debug         디버그 정보 포함, 기본값 false
			optimize      최적화 사용, 기본값 false
			verbose       긴 결과 제공
			failonerror   오류가 발생하면 빌드 중지, 기본값 true
			encoding      소스 파일의 인코딩을 지정
						  javac의 ?encoding 옵션과 동일
			nowarn        on을 값으로 가질 경우 컴파일할 때 ?nowarn 옵션을 사용. 기본값은 off
			deprecation   on을 값으로 가질 경우 ?deprecation 옵션을 컴파일할 때에 사용, 기본값은 off


	2. jar: JAR 파일로 압축

		destfiel 속성은 생성할 JAR 파일을 지정
		basedir 속성은 jar파일로 압축할 기본 디렉토리 지정
		includes, includesfile, excludes, excludesfile, defualtexcludes 속성 사용

			<jar destfile="${dist}/lib/app.jar"  basedir="${build}/classes" />

	3. zip : ZIP 파일로 압축

		includes, includesfile, excludes, excludesfile, 속성 사용
		<zipfileset>은 압축되는 파일의 경로명을 변경 가능

			prefix    ZIP 파일에 압축될 때 변경되어 들어갈 경로명
			fullpath  특정 파일의 변경될 경로를 지정
			filemode  유닉스 기반의 시스템에서 사용되며, 압축되는 파일의 모드를 지정. 기본값은 644
			dirmode   유닉스 기반의 시스템에서 압축되는 디렉토리의 모드를 지정. 기본값은 755


	4. war : 웹 어플리케이션 압축

		basdir  속성을 사용하여 해당 디렉토리를 WAR파일로 묶는다.
		lib     태그 지정한 파일들을 WEB-INF/lib 디렉토리에 위치하게 해준다.
		classes 태그는 지정한 디렉토리에 위치한 classes 파일들을 WEB-INF/classes디렉토리에 위치하게 해준다.
		webxml  속성은 지정한 파일을 WEB-INF/web.xml 파일로 복사한다
		includes, includesfile, excludes, excludesfile, defualtexcludes 속성 사용
		파일을 묶을 때 파일의 경로를 변겨해주는 zipfileset 태그 사용 가능

			<war destfile="main.war" webxml="src/metadata/web.xml">
			   <fileset dir="src/mainapp/html" />
			   <fileset dir="src/mainapp/j네" />
			   <lib dir="lib">
				  <exclude name="logging2.jar"/>
			   </lib>
			   <classes dir="build/main/classes"/>
			   <zipfileset dir="src/imagefile/images" prefix="images"/>
			</war>

	5. tar : TAR 파일의 생성

		basedir속성이나 <fileset> 태그 등을 사용하여 묶을 파일의 목록을 지정
		compression 속성을 사용하여 우너하는 방식으로 압축가능, “gzip", “bzip2","none"값 지정
		tarfileset 태그는 파일을 묶을 때 파일의 경로를 변경해 주며, 파일에 대한 사용자 및 그룹을 지정할 수도 있다.

			<tar destfile="${dist}/example.tar.gz" basedir="${build}" compression="gzip"/>

		[tarfileset 태그가 제공하는 속성]

			mode      3자리 8진수값
			useranme  파일에 대한 사용자 이름을 지정, UID와는 다름
			group     파일에 대한 그룹 이르을 지정, GID와는 다름
			prefix    ZIP 파일에 압축될 때 변경되어 들어갈 경로명
			fullpath  특정 파일의 변경될 경로를 지정
			preserveLeadingSlashes   맨 앞의 '/'를 유지할지의 여부를 지정, 기본값은 false


	6. javadoc : API 문서의 생성

		소스 코드로부터 Javadoc API문서를 생성
		옵션이 너무 많아서 생략^^;

	7. copy : 파일 복사

		지정한 디렉토리로 파일을 복사
		개개의 파일을 복사할 수도 있고 디렉토리 단위로 복사할 수도 있다.

			<copy todir="${build}/src">
			   <fileset dir="${workspace}/src"/>
			</copy>

		[copy 태스크에서 자주 사용되는 속성]

			file                  복사할 파일을 지정
			tofile                복사될 파일을 지정
			todir                 원본을 복사할 디렉토리 지정
			overwrite             true인경우 기존에 존재하는 파일을 덮어 쓴다. 기본값 false
			preservelastmodified  True인 경우 원본의 최종 수정 날짜를 유지. 기본값은 false
			includeEmptyDirs      <fileset>으로 지정한 디렉토리 중 텅빈 디렉토리도 복사할지의 여부를 지정, 기본값은 true
			failonerror           파일이 없을 경우 빌드 중단, 기본값 true
			verbose               복사한 파일 목록, 기본값 false


	8. mkdir : 디렉토리의 생성

		<mkdir dir="${build}/webapp/WEB-INF/classes" />

	9. delete : 파일의 삭제

		file 속성 -  특정 파일을 삭제하기 위해 지정
		dir 속성  -  지정 디렉토리 및 그 하위 디렉토리까지 모두 삭제
		includes, includesfile, excludes, excludesfile, defualtexcludes 속성 사용
		<fileset> 태그를 사용하여 삭제할 파일의 집합 표시 가능 (단 파일만 삭제될 뿐 디렉토리는 삭제되지 않는다)
		includeEmptyDirs 속성 - true로 지정하면 텅빈 디렉토리까지 삭제
		failonerror 속성 ? 오류시 빌드 중단, 기본값 true
		verbose속성 ? 삭제할 파일 목록, 기본값 false

	10. ant : 또 다른 빌드 파일의 실행

		하나의 프로젝트가 여러 개의 서브 프로젝트로 구성되어 있는 경우 한번에 서브 프로젝트를 포함한 모든 프로젝트를 빌드함

		[ant 태스크의 속성]

			antfile      사용할 빌드 파일을 지정, 명시하지 않을 경우 build.xml파일 사용, dir 속성에 주어진 디렉토리에 대해 상대 경로로 명시해야 함
			dir          새로운 Ant 프로젝트의 basedir을 지정, 사용될 빌드 파일에서 basedir 속성을 지정하고 있다면 무시됨
			target       수행할 타겟을 지정
			output       새로운 Ant 프로젝트의 수행 결과를 저장할 파일을 지정
			inheritAll   기본값 true이며 새로운 Ant 프로젝트는 현재Ant 프로젝트의 모든 프로퍼티를 전달받는다.
			inheritRefs  기본값 true이며 새로운 Ant 프로젝트는 현재 Ant 프로젝트의 모든 참조를 전달받는다.


	11. java : 자바 실행

		[java 태스크가 제공하는 속성의 목록]

			classname    실행할 클래스 이름
			jar          실행할 jar 파일의 위치
			classpath    사용할 클래스 패스를 지정
			classpathref 미리 지정한 <path>요소를 참조
			fork         true인경우 새로운 가상 머신에서 클래스를 수행, 기본값은 false
			maxmemory    포크된 가상 머신에 할당할 메모리의 최대 크기를 지정 (fork가 false인 경우 무시)
			dir          가상 머신을 호출할 디렉토리(fork가 false인 경우 무시)
			output       결과 파일
			append       기본 파일에 연결하거나 겹쳐씀

			<java classname="Add" classpath="${basedir}/bin">
			   <arg value="100"/>
			   <arg value="200"/>
			</java>

	12. native2ascii : 유니코드로의 변환..

		ResourceBundle 클래스나 Properties 클래스를 사용하여 프로퍼티 파일로부터 정보를 읽어올 때 파일에 있는 문자를 유니코드로 변환해준다.
		Src   속성은 변환할 파일들의 위치한 기준 디렉토리를 지정
		Dest  속성은 변환한 결과를 저장할 디렉토리
		includes, includesfile, excludes, excludesfile, defualtexcludes 속성 사용
		<include>,<exclude>태그를 사용하여 원하는 파일만 변환처리 가능
		encoding 속성은 변환할 파일의 인코딩 지정(명시하지 않을 경우 JVM 기본 인코딩 사용)
		reverse  옵션은 이스케이프된 유니코드를 지정한 인코딩을 사용하는 문자열로 변환

	13. buildnumber : 빌드 번호

		파일에서 빌드 번호를 읽고 build.number를 설정한 다음 build.number+1의 값을 파일에 기록

			<buildnumber file="buildnum.txt"/>

	14. echo

		System.out(기본값), 파일, 로그, 수신기에 메시지를 기록

			message   기록할 텍스트   텍스트를 요소 컨텐츠로 사용하지 않을 경우 필수
			file      결과 파일
			append    파일을 겹쳐 쓰지 않고 연결, 기본값 false

			<echo message="Hello"/>
			<echo> This is a message from Ant </echo>

	15 tstamp

		DSTAMP, TSTAMP, TODAY 프로퍼티를 설정
		DSTAMP : yyyyMMdd
		TSTAMP : hhmm
		TODAY  : MMM dd yyy
		cf. <format>은 Java의 SimpleDateFormat 클래스에서 정의한 패턴을 사용해 현식을 변경하는데 쓰인다.




# -----------------------------------------------------------------------------------------------------------
[ Ant에서 ssh 서버에서 upload/download 처리 - scp task ]

	Ant에서 기본적으로 제공해주는 scp task를 이용하여 ssh가 열려있는 서버에 업로드와 다운로드를 처리할 수 있다.
	
	JCraft 홈페이지에서 'jsch-0.1.42.jar'를 추가합니다.

		<property name="deploy.lib" value="/home/lib" />
		<target name="upload workflow.jar">
			<tstamp />
			<property name="deploy.lib.backup" value="/home/lib/backup/${DSTAMP}${TSTAMP}" />
			
			<mkdir dir="${deploy.lib.backup}" />
			
			<!-- download -->
			<scp file="<user>:<pass>@<host>:/home/workflow.jar" todir="${deploy.lib.backup}" trust="true" />
			
			<!-- upload -->
			<scp todir="<user>:<pass>@<host>:/home" trust="true">
				<fileset dir="${deploy.lib}" include="makeflow.jar" />
			</scp>
		</target>


# -----------------------------------------------------------------------------------------------------------

			<scp todir="user:pass@host:/home/user">
				<fileset dir="${src.dir}">
					<include name="**/*.java"/>
				</fileset>
			</scp>

# -----------------------------------------------------------------------------------------------------------

			<scp todir="user:password@somehost:/home/chuck" trust="true">
				<fileset dir="src_dir">
					<include name="**/*.java"/>
				</fileset>
			</scp>
			
			<scp todir="user@somehost:/home/chuck" password="pass" trust="true">
				<fileset dir="src_dir" excludes="**/*.java"/>
			</scp>

# -----------------------------------------------------------------------------------------------------------

		<target name="scp" depends="compile">
			<scp port="22" todir="username:password@hostname:/destdir/" trust="true" verbose="true">
				<fileset dir="${src.dir}/..">
					<!-- 변경된 파일만 복사 -->
					<modified>
						<param name="cache.cachefile" value="localdev.cache"/>
					</modified>
				</fileset>
			</scp>
		</target>

# -----------------------------------------------------------------------------------------------------------

		<?xml version="1.0" encoding="UTF-8"?>
		<project name="ad_engine" default="all" basedir=".">
		 
			<property name="server.host" value="아이피"/>
			<property name="server.port" value="포트"/>
			<property name="server.username" value="사용자아이디"/>
			<property name="server.password" value="사용자비밀번호">
		 
			<target name="all" depends="copy,reboot"/>
		 
			<target name="copy">
				<echo>copy</echo>
				<scp file="target/ad_engine.jar" todir="${server.username}:${server.password}@${server.host}:/home/obigo/opt/AdEngine/libs" port="${server.port}" trust="true"></scp>
			</target>
			 
			<target name="reboot">
				<echo>reboot</echo>
				<sshexec host="${server.host}" port="${server.port}" trust="true" username="${server.username}" password="${server.password}" command="cd opt/AdEngine; bin/stop.sh; bin/boot.sh start" timeout="10000" failonerror="false" />
			</target>
		 
		</project>

# -----------------------------------------------------------------------------------------------------------

		<project name="Jsch" default="dist" basedir=".">
			<description>
			JSch is a pure Java implementation of SSH2. JSch allows you to connect to an
			sshd server and use port forwarding, X11 forwarding, file transfer, etc., and
			you can integrate its functionality into your own Java programs
			</description>

			<!-- set global properties for this build -->
			<property name="version"     value="0.1.54"/>
			<property name="src"         location="src/main/java/"/>
			<property name="exasrc"      location="examples"/>
			<property name="build"       location="build"/>
			<property name="exabuild"    location="examples"/>
			<property name="dist"        location="dist"/>
			<property name="javadoc"     location="javadoc"/>
			<property name="javac.debug" value="true"/>
			<path id="lib.path.ref">
				<fileset dir="lib" includes="*.jar"/>
			</path>
			<path id="project.cp">
				<pathelement location="${build}"/>
			</path>

		    <!-- =================================
		          target: init
		         ================================= -->
			<target name="init">
				<!-- Create the time stamp -->
				<tstamp/>
				<!-- Create the build directory structure used by compile -->
				<mkdir dir="${build}"/>
			</target>

		    <!-- =================================
		          target: compile
		         ================================= -->
			<target name="compile" depends="init" description="compile the source " >
				<!-- Compile the java code from ${src} into ${build} -->
				<available property="jzlib.available" classname="com.jcraft.jzlib.ZStream">
					<classpath refid="lib.path.ref"/>
				</available>
				<javac srcdir="${src}"
					destdir="${build}"
					target="1.4"
					source="1.4"
					debug="${javac.debug}">
					<classpath refid="lib.path.ref"/>
					<exclude name="com/jcraft/jsch/jcraft/Compression.java" unless="jzlib.available"/>
				</javac>
			</target>

		    <!-- =================================
		          target: dist
		         ================================= -->
			<target name="dist" depends="compile" description="generate the distribution" >
				<!-- Create the distribution directory -->
				<mkdir dir="${dist}/lib"/>

				<!-- Put everything in ${build} into the MyProject-${version}.jar file -->
				<jar jarfile="${dist}/lib/jsch-${version}.jar" basedir="${build}">
					<!--
					<manifest>
						<attribute name="Bundle-ClassPath" value="."/>
						<attribute name="Bundle-Vendor" value="JCraft, Inc."/>
						<attribute name="Bundle-Name" value="com.jcraft.jsch"/>
						<attribute name="Bundle-ManifestVersion" value="2"/>
						<attribute name="Bundle-SymbolicName" value="com.jcraft.jsch"/>
						<attribute name="Bundle-Version" value="${version}"/>
						<attribute name="Export-Package" value='com.jcraft.jsch;version="${version}",com.jcraft.jsch.jce;version="${version}";x-internal:=true,com.jcraft.jsch.jcraft;version="${version}";x-internal:=true,com.jcraft.jsch.jgss;version="${version}";x-internal:=true'/>
						<attribute name="Import-Package" value="javax.crypto,javax.crypto.spec,javax.crypto.interfaces,org.ietf.jgss,com.jcraft.jzlib"/>
					</manifest>
					-->
				</jar>
			</target>

		    <!-- =================================
		          target: examples
		         ================================= -->
			<target name="examples" description="compiles the examples" depends="compile">
				<!-- examples -->
				<path id="compile.classpath">
					<pathelement location="${build}" />
				</path>

				<javac srcdir="${exasrc}" destdir="${exabuild}">
					<classpath refid="compile.classpath"/>
				</javac>
			</target>

		    <!-- =================================
		          target: clean
		         ================================= -->
			<target name="clean" description="clean up" >
				<!-- Delete the ${build} and ${dist} directory trees -->
				<delete dir="${build}"/>
				<delete dir="${dist}"/>
				<delete dir="${javadoc}"/>
			</target>

		    <!-- =================================
		          target: javadoc
		         ================================= -->
			<target name="javadoc">
				<javadoc sourcepath="${src}" destdir="${javadoc}">
					<packageset dir="${src}"/>
				</javadoc>
			</target>
		</project>


# -----------------------------------------------------------------------------------------------------------

	SCP업로드.xml
	
		<?xml version="1.0" encoding="UTF-8"?>
		<project name="홈페이지 업로드" basedir="." default="수정 파일 업로드">
			<property name="scp.server" value="192.168.20.xxx"/>
			<property name="scp.port" value="22" />
			<property name="scp.home.dir" value="/복사할디렉토리"/>
			<property name="scp.userid" value="아이디"/>
			<property name="scp.pw" value="패스워드"/>
		
			<target name="수정 파일 업로드">
				<scp username="${scp.userid}" password="${scp.pw}" todir="${scp.userid}:${scp.pw}@${scp.server}:${scp.home.dir}" trust="true" verbose="true" >
					<fileset dir="./">
						<modified>
							<param name="cache.cachefile" value="./update.cachefile"/>
						</modified>
		
						<include name="/WebContent/**"/>
					</fileset>
				</scp>
			</target>
		
			<target name="전체 파일 업로드">
				<scp username="${scp.userid}" password="${scp.pw}" todir="${scp.userid}:${scp.pw}@${scp.server}:${scp.home.dir}" trust="true" verbose="true" >
					<fileset dir="./">
						<include name="/WebContent/**"/>
					</fileset>
				</scp>
			</target>
		
		</project>
		
		com.jcraft.jsch 라이브러리가 필요함(파일첨부)
		
		
	SFTP업로드.xml
	
		<?xml version="1.0" encoding="UTF-8"?>
		<project name="홈페이지 업로드" basedir="." default="바뀐 파일만 업로드">
			<property name="sftp.server" value="192.168.20.xxx"/>
			<property name="sftp.port" value="22" />
			<property name="sftp.home.dir" value="복사할 디렉토리"/>
			<property name="sftp.userid" value="아이디"/>
			<property name="sftp.pw" value="패스워드"/>
		
			<taskdef name="ssh" classname="com.sshtools.ant.Ssh" />
		
			<target name="모든 파일 업로드">
				<ssh host="${sftp.server}" port="${sftp.port}" username="${sftp.userid}" password="${sftp.pw}" version="2">
					<exec cmd="rm -R ${sftp.home.dir}/WebContent/" />
		
					<sftp action="put" remotedir="${sftp.home.dir}" verbose="true">
						<fileset dir=".">
							<include name="**/WebContent/**" />
						</fileset>
					</sftp>
		
					<exec cmd="service tomcat7 restart" />
				</ssh>
			</target>
		
			<target name="바뀐 파일만 업로드">
				<ssh host="${sftp.server}" port="${sftp.port}" username="${sftp.userid}" password="${sftp.pw}" version="2">
					<sftp action="put" remotedir="${sftp.home.dir}" verbose="true" depends="yes">
						<fileset dir=".">
							<include name="**/WebContent/**" />
						</fileset>
					</sftp>
				</ssh>
			</target>
		</project>

















# -----------------------------------------------------------------------------------------------------------
[ 이클립스에서 ant 설정 ]

	1. Windows > Preferences > General > Content Type > Text > XML > Ant Buildfile > build.xml(locked) : UTF-8

	2. Windows > Preferences > General > Editors > File Associations > File types : build.xml(추가) > Default(클릭)
	
	3. Windows > Preferences > Ant > Editor > Formatter
	
	4. Windows > Preferences > Ant > Editor > Templates
	
	5. Windows > Preferences > Ant > Runtime
	
		Classpath  : ant 클래스페스에 태스크와 타입을 정의하는 클래스를 추가가능
		Task       : 클래스패스에 잡혀있는 클래스 가운데 하나의 클래스 안에 있는 태스크들을 추가가능
		Types      : 클래스패스에 잡혀잇는 클래스 가운데 하나의 클래스 안에 있는 타입들을 추가가능
		Properties : ant 실행 시 글로벌하게 사용가능한 프로퍼티나 프로퍼티 파일 추가 가능

	6. build.xml파일을 생성하고 <Ctrl + Space>로 buildfile template(기본포맷)을 선택


	프로퍼티 지정

		빌드시에 사용할 프로퍼티를 설정한다. 별도의 프로퍼티 파일로 생성해서 사용 가능

			<!--퍼로퍼티 파일 지정 -->
			<property file="build.properties" />
			<!--퍼로퍼티 설정 : 각종 폴더 & 생성파일 -->
			<property name="project.name" value="VerySimpleBlog"/>
			<property name="base.dir" value="."/>
			<property name="src.dir" value="src" />
			<property name="web.dir" value="WebContent"/>
			<property name="dist.dir" value="dist"/>
			<property name="build.dir" value="build"/>
			<property name="war.file" value="${dist.dir}/${project.name}.war"/>

	path 지정

		컴파일에 필요한 라이브러리 패스를 설정한다.

			<!-- 컴파일 패스 설정 : 웹 라이브러리 위치 (WEB-INF/lib), 톰캣 라이브러리 추가(tomcat/lib) -->
			<path id="project.classpath">
				<pathelement location="${web.dir}/WEB-INF/lib"/>
				<fileset dir="${web.dir}/WEB-INF/lib">
					<include name="*.jar"/>
				</fileset>
				<pathelement location="${tomcat.home}/lib"/>
				<fileset dir="${tomcat.home}/lib">
					<include name="*.jar"/>
				</fileset>
			</path>

	빌드 날짜 생성

		빌드 날짜를 스탬프로 찍는다.

			<target name="datentime" description="create current date">
				<tstamp>
					<format property="DSTAMP" pattern="yyyy-MM-dd"/>
					<format property="TSTAMP" pattern="HH:mm:ss"/>
				</tstamp>
				<echo message="Build started at : ${DSTAMP} - ${TSTAMP}" />
			</target>

	prepare

		빌드하기전에 빌드폴더 생성 및 WebContent?내의 파일을 build 폴더로 복사한다.

			<target name="prepare" depends="datentime, clean" description="copy web contents">
				<mkdir dir="${build.dir}"/>
				<mkdir dir="${build.dir}/WEB-INF" />
				<mkdir dir="${build.dir}/WEB-INF/classes" />
				<copy todir="${build.dir}">
					<fileset dir="${web.dir}" />
				</copy>
			</target>

	Clean

		build와 dist 폴더를 삭제한다.

			<target name="clean" description="delete build, dist">
				<delete dir="${dist.dir}" />
				<delete dir="${build.dir}" />
			</target>

	build

		build 폴더에 자바 컴파일 후 classes 파일을 복사한다.

			<target name="build" depends="prepare" description="compile java">
				<javac srcdir="${src.dir}"
					destdir="${build.dir}/WEB-INF/classes"
					debug="${compile.debug}"
					deprecation="${compile.deprecation}"
					optimize="${compile.optimize}"
					classpathref="project.classpath">
				</javac>
				<copy todir="${build.dir}/WEB-INF/classes">
					<fileset dir="${src.dir}" excludes="**/*.java, **/*.properties" />
				</copy>
			</target>

	Dist

		build 폴더를 프로젝트이름.war로 압축해서 dist 폴더로

			<target name="dist" depends="build" description="make war file from build to dist">
				<mkdir dir="${dist.dir}"/>
				<jar destfile="${war.file}" basedir="${build.dir}" />
			</target>

	apply

		build 폴더와 톰캣 app 폴더와 동기화 시킨다.

			<target name="apply" depends="build" description="sync between webapp and build ">
				<sync todir="${tomcat.home}/webapps/${project.name}">
					<fileset dir="${build.dir}" />
				</sync>
			</target>

	javadoc

		api documentation 생성

			<target name="javadoc" description="api documentation">
				<mkdir dir="${dist.dir}/docs/api" />
				<javadoc sourcepath="${src.dir}" destdir="${dist.dir}/docs/api" packagenames="*">
					<classpath refid="project.classpath" />
				</javadoc>
			</target>









# -----------------------------------------------------------------------------------------------------------
[ META-INF/MANIFEST.MF 파일에 build실행한 날짜와 시간을 자동 작성]

1. 실행시 build 시작 시간을 출력한다.

	<target name="prepare" depends="clean">
		<tstamp>
			<format property="DSTAMP" pattern="yyyy.MM.dd" />
			<format property="TSTAMP" pattern="HH:mm:ss" />
		</tstamp>
		<echo message="Build start!! ==========> ${DSTAMP} ${TSTAMP}" />
		<property name="builddate" value="${DSTAMP} ${TSTAMP}" />
	</target>
	
2. JAR 파일에 builddate을 자동 작성

	<target name="build" depends="prepare">
		<javac srcdir="${source}" destdir="${build}" />
		<jar jarfile="${jar}/${archive}-${version}.jar" basedir="${build}">
			<manifest>
				<attribute name="Main-Class" value="${main.class}" />
				<attribute name="Last-Updated-Date" value="${builddate}" />
			</manifest>
		</jar>
	</target>

3. build.xml을 실행한다.






# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
[ Java SE 6, Eclipse, Ant를 이용한 간단한 웹 서비스 ]

wsgen    : 서비스 앤드 포인트 클래스를 읽고서 웹 서비스 전개 및 호출에 필요한 모든 아티팩트를 생성한다.

wsimport : WSDL을 읽고서 웹 서비스 개발, 전개 및 호출에 필요한 모든 아티팩트를 생성한다.


1. 웹서비스 서버 어플리케이션 : Create stand-alone Web services application with Eclipse and Java SE 6

	사이트: https://www.ibm.com/developerworks/webservices/tutorials/ws-eclipse-javase1/ws-eclipse-javase1.html

	package com.myfirst.wsServer;

	@WebService
	public class SayHello {
		private static final String SALUTATION = "Hello";
		
		public String getGreeting(String name) {
			return SALUTATION + " " + name;
		}
	}
	
	<project default="wsgen">
		<target name="wsgen">
			<exec executable="wsgen">
				<arg line="-cp ./bin -keep -s ./src -d ./bin com.myfirst.wsServer.SayHello" />
			</exec>
		</target>
	</project>

	ant를 실행하면 com.myfirst.wsServer.jaxws가 생김
	
	package com.myfirst.wsServer;
	
	public class RunService {
		public static void main(String[] args) {
			System.out.println("SayHello Web Service started.");
			Endpoint.publish("http://localhost:8080/wsServiceExample", new SayHello());
		}
	}
	
	Web 서버를 실행시키고, Browser로 http://localhost:8080/wsServerExample?wsdl을 입력하면 WSDL을 볼 수 있다.
	
	

2. 웹서비스 클라이언트 응용프로그램 : Create stand-alone Web services application with Eclipse and Java SE 6

	사이트: https://www.ibm.com/developerworks/webservices/tutorials/ws-jse/index.html

	<project default="wsimport">
		<target name="wsimport">
			<exec executable="${java.home}/../bin/wsimport">
				<arg line="-keep -s ./src -p com.myfirst.wsClient -d ./bin http://localhost:8080/wsServerExample?wsdl" />
			</exec>
		</target>
	</project>

	wsimport 태스크를 실행하면 WSDL를 참조해서 JAX-WS 관련 스텁이 생성된다.
	
	package com.myfirst.wsClient;
	
	public class SayHelloClient {
		public static void main(String[] args) {
			SayHelloService service = new SayHelloService();
			SayHello proxy = (SayHello) service.getSayHelloPort();
			((BindingProvider)proxy).getREquestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, "http://localhost:8080/wsServerExample");
			
			System.out.println(((BindingProvider)proxy).toString());
			System.out.println(proxy.getGreeting("Fiona"));
		}
	}


























# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
#
# Maven : apache-maven-3.3.3
#

- 라이프 사이클 (Lifecycle)

- 매이븐 저장소 (Maven repository) : C:/[사용자]/[계정]/.m2/repository

- 의존성 관리(Dependency Management)

- POM (Project Object Model)


# -----------------------------------------------------------------------------------------------------------
[ apache-sshd-1.2.0 패키지를 maven으로 install ]

1. apache-sshd-1.2.0-src.zip 압축을 푼다. 압축을 풀면 아래와 같은 폴더구조가 보인다.

		apache-sshd-1.2.0/
		
			LICENSE.txt
			NOTICE.txt
			pom.xml               <-- main POM 파일
			
			src/
				legal/
				tomcat-apr-5.5.23-sources.jar
			
			assembly/
				pom.xml
				src/
				
			sshd-core/
				pom.xml
				src/
				
			sshd-git/
				README.txt
				pom.xml
				src/
				
			sshd-ldap/
				pom.xml
				src/


2. apache-sshd-1.2.0 폴더 아래에서 다음 maven 명령어를 실행한다.

	> mvn -v
	
		Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T20:57:37+09:00)
		Maven home: N:\tain\products\LucyCron\tools\apache\apache-maven-3.3.3
		Java version: 1.7.0_79, vendor: Oracle Corporation
		Java home: N:\tain\products\LucyCron\tools\jdk\jdk1.7.0_79\jre
		Default locale: ko_KR, platform encoding: MS949
		OS name: "windows 7", version: "6.1", arch: "amd64", family: "windows"

	> mvn clean
	
	> mvn install
	
		-> ERROR 발생
	
	> mvn -DskipTests -Drat.skip=true clean install
	
		-> SUCCESS
	
	[참조]
	
		> mvn package
		
		> cd ..
		
		> mvn package -Pdist -DskipTests -Dtar
	
	
	

# -----------------------------------------------------------------------------------------------------------
[ Lift cycle ]

	prepare-seources > compile > package > install

[ clean lifecycle ]

	pre-clean
	clean
	post-clean

[ default lifecycle ]

	validate
	compile
	test-compile
	package
	verify
	install
	deploy	

[ site lifecycle ]

	pre-site
	site
	post-site
	site-deploy
	
[ jar lifecycle ]

	process-resources
	compile
	process-test-resources
	test-compile
	test
	package
	install
	deploy

[ pom ]

	package
	install
	deploy

[ war ]

	process-resources
	compile
	process-test-resources
	test-compile
	test
	package
	install
	deploy


# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------


1. [ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.8.2:deploy (default-deploy) 
	on project sshd: Deployment failed: repository element was not specified in the POM inside distributionManagement 
	element or in -DaltDeploymentRepository=id::layout::url parameter -> [Help 1]	

2. [ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.8.2:deploy (default-deploy) 
	on project sshd: Deployment failed: repository element was not specified in the POM inside distributionManagement 
	element or in -DaltDeploymentRepository=id::layout::url parameter -> [Help 1]
	
	mvn -e -DaltDeploymentRepository=org.apache.sshd::sshd::sshd deploy



# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------

































































# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------
#
# Gradle :
#


























